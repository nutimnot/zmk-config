/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define NUM_SYM 1
#define NAV     2
#define POWER   3
#define GAME    4


/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <20>;
            key-positions = <8 9>;
            bindings = <&kp BSPC>;
        };
        combo_powerlayer {
            timeout-ms = <20>;
            key-positions = <32 33>;
            bindings = <&mo POWER>;
        };
        combo_tab {
            timeout-ms = <20>;
            key-positions = <10 31>;
            bindings = <&kp LA(TAB)>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &hm ESC Q      &kp W      &kp E       &kp R       &kp T  &kp Y  &kp U       &kp I       &kp O      &kp P
            &kp A      &kp S      &kp D       &kp F       &kp G  &kp H  &kp J       &kp K   &kp L &hm SQT SEMICOLON
            &hm LSHFT Z                 &kp X       &kp C       &kp V  &kp B  &kp N       &kp M       &kp COMMA  &hm SLASH DOT
            &kp RCTRL  &kp LGUI   &kp LALT       &lt NUM_SYM SPACE    &lt NAV SPACE   &kp LSHFT   &kp SQT    &kp QMARK
            >;
        };
        num_sym {
            bindings = <
            &kp TILDE     &kp EQUAL     &hm RC(LS(LEFT_BRACKET)) MINUS     &hm RC(LS(RIGHT_BRACKET)) PLUS    &trans  &trans &kp KP_MULTIPLY &kp KP_DIVIDE      &trans &kp BSPC
            &hm TAB N1     &kp N2     &kp N3     &kp N4     &kp N5 &kp N6 &kp N7     &kp N8      &kp N9    &kp N0
            &kp N6 &kp N7     &kp N8      &kp N9    &kp N0  &trans      &trans       &trans     &trans
            &trans &trans    &none         &trans        &kp RET             &trans     &trans    &none
            >;
        };

    nav {
            bindings = <
            &none    &none      &none       &none       &none &none &none   &none    &kp LEFT_BRACKET       &kp RIGHT_BRACKET
            &kp EXCLAMATION     &kp AT_SIGN     &kp HASH     &kp DOLLAR      &kp PERCENT &kp CARET &kp AMPERSAND    &kp ASTERISK     &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS
            &kp MINUS       &none      &none   &none   &none &none        &none        &none     &none
            &none &none      &none         &trans        &trans             &trans       &none     &none
            >;
        };
    power {
            bindings = <
            &kp F1    &kp F2      &kp F3       &kp F4       &kp F5 &kp F6 &kp F7       &kp F8       &kp F9     &kp BSPC
            &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4      &bt BT_SEL 5 &kp LEFT_ARROW &kp DOWN_ARROW     &kp UP_ARROW      &kp RIGHT_ARROW &none
            &none       &none      &kp LC(PRINTSCREEN)      &hm C_NEXT C_PLAY_PAUSE &none &none        &none        &none     &none
            &bootloader &reset      &none         &mo POWER        &trans             &trans       &tog GAME     &bt BT_CLR
            >;
        };
        game {
            bindings = <
            &kp Q      &kp W      &kp E       &kp R       &kp T  &kp Y  &kp U       &kp I       &kp O      &kp P
            &kp A      &kp S      &kp D       &kp F       &kp G  &kp H  &kp J       &kp K   &kp L &kp SEMICOLON
            &kp TAB                 &kp X       &kp LEFT_ARROW     &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW       &kp M       &kp COMMA  &kp DOT
            &kp RCTRL  &kp LGUI   &kp LALT       &kp RET    &kp SPACE   &kp LSHFT   &tog GAME    &kp QMARK
            >;
        };
    };
};
